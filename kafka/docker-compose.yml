# Copyright VMware, Inc.
# SPDX-License-Identifier: APACHE-2.0

version: "2"

# Definimos la red en la que se va a ejecutar kafka
networks:
  cqrs_network:
    driver: bridge

services:

# From docker kafka image configuration: 

# Apache Kafka Raft (KRaft) makes use of a new quorum controller service in 
# Kafka which replaces the previous controller and makes use of an event-based 
# variant of the Raft consensus protocol. This greatly simplifies Kafka’s 
# architecture by consolidating responsibility for metadata into Kafka itself, 
# rather than splitting it between two different systems: ZooKeeper and Kafka.

# Añado la configuración (comentada) para usar zookeeper

  # zookeeper:
  #   image: docker.io/bitnami/zookeeper:3.9
  #   ports:
  #     - "2181:2181"
  #   volumes:
  #     - "zookeeper_data:/bitnami"
  #   environment:
  #     - ALLOW_ANONYMOUS_LOGIN=yes

  # kafka:
  #   image: docker.io/bitnami/kafka:3.4
  #   ports:
  #     - "9092:9092"
  #   volumes:
  #     - "kafka_data:/bitnami"
  #   environment:
  #     - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
  #   depends_on:
  #     - zookeeper

# volumes:
#   zookeeper_data:
#     driver: local
#   kafka_data:
#     driver: local


  kafka:
    image: docker.io/bitnami/kafka:3.5
    networks:
      - cqrs_network
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/data"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      # KRaft settings
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      # Listeners
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT

volumes:
  kafka_data:
    driver: local